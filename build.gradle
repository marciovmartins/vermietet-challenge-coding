buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE'
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.1.4"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.3.RELEASE'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.19.1'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.3.RELEASE'
    testCompile group: 'org.json', name: 'json', version: '20180130'
    testCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.6'
}

sourceSets {
    integrationTest {
        java {
            srcDirs = ["src/integration-test/java"]
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    acceptanceTest {
        java {
            srcDirs = ["src/acceptance-test/java"]
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDirs = ["src/acceptance-test/resources"]
        }

    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
    acceptanceTestImplementation.extendsFrom testImplementation
    acceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.withType(Test) {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/output/jacoco.${name}.exec")
        classDumpDir = file("${buildDir}/jacoco/output/classdump")
        includes = ["vermietet.*"]
        excludes = ["*Mockito*", "*Test*"]
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

task acceptanceTest(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}
check.dependsOn acceptanceTest
acceptanceTest.mustRunAfter integrationTest

task afterAcceptanceTest(type: Exec) {
    commandLine './scripts/jacoco-run.sh'
    //noinspection GroovyAssignabilityCheck
    standardOutput new ByteArrayOutputStream()
    //noinspection GroovyAssignabilityCheck
    errorOutput    new ByteArrayOutputStream()
}
check.dependsOn(afterAcceptanceTest)
afterAcceptanceTest.mustRunAfter(acceptanceTest)

jacocoTestReport {
    executionData(test, integrationTest, acceptanceTest)
    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport
afterAcceptanceTest.finalizedBy jacocoTestReport

bootRun {
    if ( project.hasProperty('jvmArgs') ) {
        //noinspection GroovyAssignabilityCheck
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:13001/vermietet'
    user = 'postgres'
    password = 'mysecretpassword'
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.acceptanceTest.java.srcDirs
    }
}